<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="views/css/reset.css">
    <link rel="stylesheet" href="views/css/style.css">
    <script src="https://kit.fontawesome.com/7a89e754ee.js" crossorigin="anonymous"></script>
    <script src="/__/firebase/8.0.1/firebase-app.js"></script>
    <script src="/__/firebase/8.0.1/firebase-firestore.js"></script>
    <script src="/__/firebase/init.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/110/three.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/3.1.0/three.js/build/ar.js"></script>
</head>

<body>
    <nav id="set-hamburger" style="display: none;"></nav>
    <header class="header">
        <!-- <a href="javascript:history.back();" class="header__video-back">
                <div class="search__icon">
                    <span class="icon-line icon-line--line1"></span>
                    <span class="icon-line icon-line--line2"></span>
                </div>
            </a> -->
        <div class="header__name">部屋名</div>
    </header>
    <main class="main">
        <section class="video-area"></section><!-- セレクトボタンが押されて生成 -->

        <!-- マイオブジェクトから共有するmodalのコード -->
        <div class="modal js-modal">
            <div class="modal__bg js-bg"></div>
            <div class="modal__main">
                <div class="my-object-list">
                    <h2 class="my-object-list__title">マイオブジェクト一覧</h2>

                    <!-- マイオブジェクト一覧で選択したときに表示するアコーディオン -->
                    <div class="category__my-object">
                        <!-- 選択中の画像を表示 -->
                        <div class="my-object-list__select my-object-list__select--video" id="select_image"></div>
                        <!-- 選択するボタン -->
                        <div class="my-object-list__decision">
                            <input type="submit" value="マイオブジェクトを選択" class="main-btn my-object-list__submit">
                            <input type="reset" value="キャンセル" class="sub-btn my-object-list__cansel"
                                id="js-category-cansel">
                        </div>
                    </div>

                    <!-- サーバーから取得したマイオブジェクト一覧の画像 -->
                    <ul class="my-object-list__items">
                        <!--<li class="my-object-list__item" id="my-object-list__item1"></li>-->
                    </ul>
                </div>
            </div>
        </div>
    </main>
    <section class="video-menu">
        <div class="video-menu__object js-btn"><i class="fas fa-images fa-2x"></i>オブジェクト</div>
        <div class="video-menu__mic"><i class="fas fa-2x icon-mic"></i>マイク</div>
        <div class="video-menu__video"><i class="fas fa-2x icon-video"></i>ビデオ</div>
        <div class="video-menu__end"><form action="/video" method="get" id="hang_up"></form><i class="fas fa-sign-out-alt fa-2x"></i>退室</div>
    </section>
    <footer id="footer" style="display: none;"></footer>

    <script src="views/js/include.js"></script>
    <script src="views/js/modal.js"></script>
    <!--<script src="views/js/videoActive.js"></script>-->
    <script>
        // <%console.dir(anyOneMarkerObject);%>
        const videoArea = document.querySelector('.video-area');
        const videoMenu = document.querySelector('.video-menu');
        const videoBtn = document.querySelector('.video-menu__video');
        const micBtn = document.querySelector('.video-menu__mic');
        const iconVideo = document.querySelector('.icon-video');
        const iconMic = document.querySelector('.icon-mic');
        let userWidth = "48%";
        // iphoneかipadかその他かを確認
        const model = navigator.platform;
        if (model.indexOf("iPhone") != -1) {
            userWidth = "39vh";
        } else if (model.indexOf("iPad") != -1) {
            userWidth = "42vh";
        } else {

        }

        // 変数の作成 from ejs
        let micFlag = Boolean(<%= micFlag %>)
        let videoFlag = Boolean(<%= videoFlag %>)
        const roomId = String(<%= roomId %>)
        let patternURL = "<%= anyOneMarkerObject.anyOneMarkerList[0].patternURL %>";
        patternURL = patternURL.replace('amp;', '');
        let objectURL = "<%= anyOneMarkerObject.anyOneMarkerList[0].objectURL %>";
        objectURL = objectURL.replace('amp;', '');

        
        let objectList = [];

        <% objectList.forEach((object) => { %>
            // urlを整形
            var url = "<%= object.objectURL %>";
            url = url.replace('amp;', '')

            objectList.push({
                objectId: "<%= object.id %>",
                objectName: "<%= object.objectName %>",
                objectURL: url,
                objectSelected: "<%= object.objectSelected %>"
            });
        <% }); %>    

        // const people = videoFour; どこかのタイミングで選択された人数を見て判断（ここでは仮に４人としている）

        if (videoFlag) {
          iconVideo.classList.add('fa-video');
        } else {
          iconVideo.classList.add('fa-video-slash');
        }

        if (micFlag) {
          iconMic.classList.add('fa-microphone');
        } else {
          iconMic.classList.add('fa-microphone-slash');
        }

        // ビデオボタンを押されたとき
        videoBtn.addEventListener('click', () => {
            iconVideo.classList.toggle('fa-video');
            iconVideo.classList.toggle('fa-video-slash');

            // on/off 切り替え
            videoFlag = !videoFlag;
            console.log(`video switch => ${videoFlag}`);

            // stream を設定通りに再開
            reOpenUserMedia(micFlag, videoFlag);
        });

        // マイクボタンを押されたとき
        micBtn.addEventListener('click', () => {
            iconMic.classList.toggle('fa-microphone');
            iconMic.classList.toggle('fa-microphone-slash');

            // on/off 切り替え
            micFlag = !micFlag;
            console.log(`mic switch => ${micFlag}`);

            // stream を設定通りに再開
            reOpenUserMedia(micFlag, videoFlag);
        });

        window.onload = async function () {
            // 表示する場所を生成
            videoMenu.style.display = 'flex';
            let user = null;
            let userDisplay = null;
            let video = null;
            // for test
            let i = 0;

            <%if (people == anyOneMarkerObject.names.length) {%>
                <%anyOneMarkerObject.names.forEach(userName => {%>
                    // div要素の作成（user）
                    user = document.createElement('div');
                    user.classList.add('user');
                    user.style.position = 'relative';
                    user.style.zIndex = 0;
                    user.id = `<%=userName%>${i}`;
                    if (window.matchMedia('(min-width: 1000px)').matches) {
                        user.style.width = '48%';
                        user.style.height = '100%';
                    } else {
                        user.style.width = '100%';
                        user.style.height = userWidth;
                    };

                    // div要素の作成（userDisplay）
                    userDisplay = document.createElement('div');
                    userDisplay.classList.add('user__name');
                    userDisplay.style.position = 'absolute';
                    userDisplay.style.zIndex = 10;
                    userDisplay.appendChild(document.createTextNode("<%=userName%>"));
                    user.appendChild(userDisplay);

                    // video要素の作成（localVideo, remoteVideo）
                    video = document.createElement('video');
                    if(i == 0){
                        video.id = 'localVideo';
                        video.muted = true;
                        i = i + 1;
                    }else{
                        video.id = 'remoteVideo';
                    }
                    // <%if(userName == anyOneMarkerObject.names[0]){%>
                    //     video.id = 'localVideo';
                    // <%}else{%>
                    //     video.id = 'remoteVideo';
                    // <%}%>

                    video.style.width = '100%';
                    video.style.height = '100%';
                    video.autoplay = true;
                    video.style.position = 'absolute';
                    video.style.zIndex = 100;

                    user.appendChild(video);

                    videoArea.appendChild(user);
                    videoArea.style.display = 'flex';
                <%})%>
            <%} else {%>
                // people.forEach(userName => {
                //     const user = document.createElement('div');
                //     user.classList.add('user');
                //     user.id = userName;
                //     user.style.width = '48%';
                //     user.style.height = userWidth;

                //     const userDisplay = document.createElement('div');
                //     userDisplay.classList.add('user__name');
                //     userDisplay.appendChild(document.createTextNode(userName));
                //     user.appendChild(userDisplay);
                //     user.appendChild(userDisplay);

                //     videoArea.appendChild(user);
                //     videoArea.style.display = 'flex';
                // });
                // ???????????????
            <%}%>

            await openUserMedia(micFlag, videoFlag);

            <%if(auth == "host"){%>
                createRoom(roomId);
            <%}else{%>
                joinRoomById(roomId);
            <%}%>

            let scene = new THREE.Scene();
            const videoDOM = document.querySelector('#remoteVideo');
            let userDOM = document.querySelector('#<%=anyOneMarkerObject.names[1]%>1');

            let renderer = new THREE.WebGLRenderer({alpha: true});
            renderer.setClearColor(new THREE.Color("black"), 0);
            renderer.setSize(videoWidth, videoHeight);
            userDOM.appendChild(renderer.domElement);
            renderer.domElement.style.zIndex = 200;
            renderer.domElement.style.position = 'absolute';

            let camera = new THREE.Camera();
            scene.add(camera);

            let light = new THREE.DirectionalLight(0xffffff);
            light.position.set(0, 0, 2);
            scene.add(light);

            // let source = new THREEx.ArToolkitSource({sourceType: "video", sourceUrl: videoDOM.srcObject});

            // function onResize(){
            //     if(context.arController !== null){
            //         source.copyElementSizeTo(context.arController.canvas);
            //     }
            // }

            // source.init(function onReady(){
            //     onResize();
            // });

            let context = new THREEx.ArToolkitContext({
                canvasWidth: videoWidth,
                canvasHeight: videoHeight,
                detectionMode: "mono"
            });

            context.init(function onCompleted(){
                camera.projectionMatrix.copy(context.getProjectionMatrix());
            });

            let group = new THREE.Group();

            let controls = new THREEx.ArMarkerControls(context, group, {
                type: "pattern",
                patternUrl: patternURL
            });

            scene.add(group);

            // geometry, material, mesh, mesh's position, mesh add to group
            let geo = new THREE.PlaneGeometry(2, 2, 2);

            const loader = new THREE.TextureLoader();
            const texture = loader.load(objectURL);

            let mat = new THREE.MeshStandardMaterial({map: texture});

            let mesh1 = new THREE.Mesh(geo, mat);
            mesh1.position.set(0, 0, 0);
            mesh1.rotation.set(-90, 0, 0);

            group.add(mesh1);

            function renderScene(){
                requestAnimationFrame(renderScene);

                // if(source.ready === false){
                //     console.log("can't ready!!");
                //     return ;
                // }

                context.update(videoDOM);

                renderer.render(scene, camera);
            }

            renderScene();
        };


        const modalList = document.querySelector('.my-object-list__items');
        const modalTitle = document.querySelector('.my-object-list__title');
        const addBtn = document.querySelector('.js-btn');
        const categorySubmit = document.querySelector('.my-object-list__submit');
        const myObjectListItems = document.querySelector('.my-object-list__items');
        const categoryMyObject = document.querySelector('.category__my-object');
        const categoryCansel = document.querySelector('.my-object-list__cansel');
        // const objects = ['オブジェクト1', 'オブジェクト2', 'オブジェクト3', 'オブジェクト4', 'オブジェクト5', 'オブジェクト6', 'オブジェクト7', 'オブジェクト8', 'オブジェクト3', 'オブジェクト4', 'オブジェクト5', 'オブジェクト6', 'オブジェクト7', 'オブジェクト8'];

        //プラスボタンをクリックしたときにマイオブジェクト一覧を動的に生成する。
        addBtn.addEventListener('click', () => {
            modalList.innerHTML = '';
            modalTitle.innerText = 'マイオブジェクトから選択';
            // objects.forEach(object => {
            //     const li = document.createElement('li');

            //     li.classList.add('my-object-list__item');
            //     //li.appendChild(document.createTextNode(object));
            //     modalList.appendChild(li);
            // });
            for(let [index, object] of objectList.entries()){
                const li = document.createElement('li');

                console.log(`objectURL => ${object.objectURL}`);
                console.log(`index => ${index}`);

                li.classList.add('my-object-list__item');
                li.style.backgroundImage = `url(${object.objectURL})`;
                li.setAttribute('onClick', `setMyModal(${index})`);
                modalList.appendChild(li);
            }
            //マイオブジェクト一覧のオブジェクトを選択したときにアコーディオンを表示する
            // const items = document.querySelectorAll('.my-object-list__item');

            // items.forEach(item => {
            //     item.addEventListener('click', () => {
            //         categoryMyObject.classList.toggle('category-open');
            //         myObjectListItems.classList.toggle('my-object-list__items--close');

            //         if (categoryMyObject.classList.contains('category-open')) {
            //             categoryMyObject.style.height = '80%';
            //         } else {
            //             categoryMyObject.style.height = 0;
            //         }

            //         if (myObjectListItems.classList.contains('my-object-list__items--close')) {
            //             myObjectListItems.style.height = 0;
            //         } else {
            //             myObjectListItems.style.height = '80%';
            //         }
            //     });
            // });
            //マイオブジェクト一覧の"キャンセルボタン"を押したときの処理
            categoryCansel.addEventListener('click', () => {
                categoryMyObject.classList.remove('category-open');
                myObjectListItems.classList.remove('my-object-list__items--close');

                if (categoryMyObject.classList.contains('category-open')) {
                    categoryMyObject.style.height = '80%';
                } else {
                    categoryMyObject.style.height = 0;
                }

                if (myObjectListItems.classList.contains('my-object-list__items--close')) {
                    myObjectListItems.style.height = 0;
                } else {
                    myObjectListItems.style.height = '80%';
                }
            });
            //マイオブジェクト一覧の"マイオブジェクトを共有する"ボタンを押した時に起こる処理（サーバーに接続し、アップデート処理が必要）
            categorySubmit.addEventListener('click', () => {
                modal.classList.remove('open');
                categoryCansel.click();
            });
        });

        //マイオブジェクト一覧の"マイオブジェクトを選択"ボタンを押した時に起こる処理（サーバーに接続し、アップデート処理が必要）
        // categorySubmit.addEventListener('click', () => {
        //     modal.classList.remove('open');
        //     categoryCansel.click();
        // });

        function setMyModal(index){
            console.log(`welcome to setMyModal => ${index}`);
            const myObjectListItems = document.querySelector('.my-object-list__items');
            const categoryMyObject = document.querySelector('.category__my-object');

            categoryMyObject.classList.toggle('category-open');
            myObjectListItems.classList.toggle('my-object-list__items--close');

            if (categoryMyObject.classList.contains('category-open')) {
                categoryMyObject.style.height = '80%';
            } else {
                categoryMyObject.style.height = 0;
            }

            if (myObjectListItems.classList.contains('my-object-list__items--close')) {
                myObjectListItems.style.height = 0;
            } else {
                myObjectListItems.style.height = '80%';
            }

            const image_div_element = document.getElementById('select_image');

            image_div_element.style.backgroundImage = `url(${objectList[index].objectURL})`;

            const submitButton = document.getElementById('submitButton');

            submitButton.setAttribute('onClick', `selectedObject(${index})`);;
        }

        function selectedObject(index){
            const selectedURL = objectList[index].objectURL;

            objectURL = selectedURL;
        }

        const leaveBtn = document.querySelector('.video-menu__end');

        // 退室の処理
        leaveBtn.addEventListener('click', async() => {
            await hangUp();

            const form = document.getElementById('hang_up');

            form.submit();
        })

        // default configuration
        const configuration = {
            iceServers: [
                {
                    urls: [
                        'stun:stun1.l.google.com:19302',
                        'stun:stun2.l.google.com:19302',
                    ],
                },
            ],
            iceCandidatePoolSize: 10,
        };

        let peerConnection = null;

        // insert canvas to localStream
        let localStream = null;

        // first insert MediaStream()
        // at peerConnection add EventListener to 'stream' for reinsert stream
        let remoteStream = null;

        let roomDialog = null;

        const db = firebase.firestore();

        // if auth is 'host'
        async function createRoom(roomsId){
            // console.log(`roomsId in createRoom => ${roomsId}`);
            const roomRef = await db.collection('rooms').doc(roomsId);

            // create peerConnection with configuration
            peerConnection = new RTCPeerConnection(configuration);

            registerPeerConnectionListeners();

            // localStream add to peerConnection
            localStream.getTracks().forEach(track => {
                peerConnection.addTrack(track, localStream);
            });

            const callerCandidatesCollection = roomRef.collection('callerCandidates');

            // listen my icecandidate
            // if it has change candidate add collection
            peerConnection.addEventListener('icecandidate', event => {
                if(!event.candidate){
                    return ;
                }
                // console.dir(`event.candidate => ${event.candidate}`);
                callerCandidatesCollection.add(event.candidate.toJSON());
            });

            // create offer and set localdescription
            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);

            const roomWithOffer = {
                'offer' : {
                    type : offer.type,
                    sdp : offer.sdp
                }
            };

            // offer add to rooms
            await roomRef.set(roomWithOffer);

            // listen track
            // if remoteStream has change add to my stream
            peerConnection.addEventListener('track', event => {
                event.streams[0].getTracks().forEach(track => {
                    remoteStream.addTrack(track);
                })
            });

            // listen room
            // if create answer it set to remoteDescription
            roomRef.onSnapshot(async snapshot => {
                const data = snapshot.data();
                if(!peerConnection.currentRemoteDescription && data && data.answer){
                    const rtcSessionDescription = new RTCSessionDescription(data.answer);
                    await peerConnection.setRemoteDescription(rtcSessionDescription);
                }
            });

            // listen anyone icecandidate
            // if it has change candidate add peerconnection
            roomRef.collection('calleeCandidates').onSnapshot(snapshot => {
                snapshot.docChanges().forEach(async change => {
                    if(change.type === 'added'){
                        let data = change.doc.data();

                        await peerConnection.addIceCandidate(new RTCIceCandidate(data));
                    }
                })
            });
        }

        // if auth is 'member'
        async function joinRoomById(roomsId){
            // console.log(`roomsId in joinRoomById => ${roomsId}`);
            const roomRef = db.collection('rooms').doc(roomsId);
            const roomSnapshot = await roomRef.get();

            if(roomSnapshot.exists){
                // create peerconnection with configuration
                peerConnection = new RTCPeerConnection(configuration);

                registerPeerConnectionListeners();

                // localstream add to peerConnection
                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                });

                // listen my icecandidate
                // if it has change candidate add to collection
                const calleeCandidatesCollection = roomRef.collection('calleeCandidates');
                peerConnection.addEventListener('icecandidate', event => {
                    if(!event.candidate){
                        return ;
                    }
                    console.log(`event.candidate => ${event.candidate}`);
                    calleeCandidatesCollection.add(event.candidate.toJSON());
                });

                // listen remotestream
                // if it has change track add to stream
                peerConnection.addEventListener('track', event => {
                    event.streams[0].getTracks().forEach(track => {
                        remoteStream.addTrack(track);
                    })
                });

                // get offer from room and create answer
                const offer = roomSnapshot.data().offer;
                await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);

                const roomWithAnswer = {
                    'answer' : {
                        type : answer.type,
                        sdp : answer.sdp
                    }
                };

                // answer add to rooms
                await roomRef.update(roomWithAnswer);

                // listen anyone icecandidate
                // if it has change candidate add to peerconnection
                roomRef.collection('callerCandidates').onSnapshot(snapshot => {
                    snapshot.docChanges().forEach(async change => {
                        if(change.type === 'added'){
                            let data = change.doc.data();

                            await peerConnection.addIceCandidate(new RTCIceCandidate(data));
                        }
                    })
                });
            }
        }

        let videoWidth = null;
        let videoHeight = null;

        // get userMedia and AR to localStream
        // use micFlag and videoFlag to get userMedia
        async function openUserMedia(micFlag, videoFlag){
            // console.log(`micFlag in openUserMedia => ${micFlag}`)
            // console.log(`videoFlag in openUserMedia => ${videoFlag}`)
            const stream = await navigator.mediaDevices.getUserMedia({video : true, audio : true});
            stream.getVideoTracks().forEach(track => {
                // console.dir(track);
                track.enabled = videoFlag;
                videoWidth = track.getSettings().width;
                videoHeight = track.getSettings().height;
                console.log(`width => ${videoWidth} , height => ${videoHeight}`);
            });
            stream.getAudioTracks().forEach(track => {
                // console.dir(track);
                track.enabled = micFlag;
            });
            localStream = stream;
            // document.querySelector('#localVideo').src = window.URL.createObjectURL(stream);
            document.querySelector('#localVideo').srcObject = stream;
            remoteStream = new MediaStream();
            document.querySelector('#remoteVideo').srcObject = remoteStream;
        }

        // get userMedia and AR to localStream
        // use micFlag and videoFlag to get userMedia
        async function reOpenUserMedia(micFlag, videoFlag){
            localStream.getVideoTracks().forEach(track => {
                // console.dir(track);
                track.enabled = videoFlag;
            });
            localStream.getAudioTracks().forEach(track => {
                // console.dir(track);
                track.enabled = micFlag;
            });
        }

        // hangup
        async function hangUp(e) {
            const tracks = document.querySelector('#localVideo').srcObject.getTracks();
            tracks.forEach(track => {
                track.stop();
                console.log('track stopped');
            });

            if (remoteStream) {
                console.log('remote stopped');
                remoteStream.getTracks().forEach(track => track.stop());
            }

            if (peerConnection) {
                console.log('connection closed');
                peerConnection.close();
            }

            document.querySelector('#localVideo').srcObject = null;
            document.querySelector('#remoteVideo').srcObject = null;

            // Delete room on hangup
            if (roomId) {
                const roomRef = db.collection('rooms').doc(roomId);
                const calleeCandidates = await roomRef.collection('calleeCandidates').get();
                calleeCandidates.forEach(async candidate => {
                    await candidate.delete();
                });
                const callerCandidates = await roomRef.collection('callerCandidates').get();
                callerCandidates.forEach(async candidate => {
                    await candidate.delete();
                });
                await roomRef.delete();
            }

            document.location.reload(true);
        }

        function registerPeerConnectionListeners() {
            peerConnection.addEventListener('icegatheringstatechange', () => {
                console.log(`ICE gathering state changed: ${peerConnection.iceGatheringState}`);
            });

            peerConnection.addEventListener('connectionstatechange', () => {
                console.log(`Connection state change: ${peerConnection.connectionState}`);
            });

            peerConnection.addEventListener('signalingstatechange', () => {
                console.log(`Signaling state change: ${peerConnection.signalingState}`);
            });

            peerConnection.addEventListener('iceconnectionstatechange ', () => {
                console.log(`ICE connection state change: ${peerConnection.iceConnectionState}`);
            });
        }
    </script>
</body>

</html>
