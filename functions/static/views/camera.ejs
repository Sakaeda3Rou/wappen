<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="views/css/reset.css">
    <link rel="stylesheet" href="views/css/style.css">
    <script src="https://kit.fontawesome.com/7a89e754ee.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/gh/aframevr/aframe@1c2407b26c61958baa93967b5412487cd94b290b/dist/aframe-master.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar-nft.js"></script>
</head>
<body class="camera-page">
    <nav id="set-hamburger"></nav>
    <main>
        <!-- <section class="camera"> -->
        <div>
          <!-- a-sceneを開始 -->
          <a-scene vr-mode-ui="enabled: false">

            <a-assets id="assets">

            </a-assets>

            <a-entity id="marker_area" camera>

            </a-entity>
          </a-scene>

        </div>
        <!-- </section> -->
        <div class="btns">
            <!-- クラン選択を表示するmodalを表示するボタン -->
            <div class="btns__btn btns__btn--clan js-btn">
                <i class="fas fa-users fa-lg"></i>
                <p>クランを選択</p>
            </div>
            <!-- マイオブジェクトからカメラで映したいオブジェクトを選択するmodalを表示するボタン -->
            <div class="btns__btn btns__btn--my-object js-btn">
                <i class="fas fa-image fa-lg"></i>
                <p>オブジェクトを選択</p>
            </div>
        </div>

        <!-- 上のbtnを押したら表示される -->
        <div class="modal js-modal">
            <div class="modal__bg js-bg"></div>
            <div class="modal__main">
                <div class="my-object-list">
                    <h2 class="my-object-list__title"></h2>

                    <!-- マイオブジェクト一覧で選択したときに表示するアコーディオン -->
                    <div class="category__my-object">
                        <!-- 選択中の画像を表示 -->
                        <div class="my-object-list__select"></div>
                        <!-- 共有するボタン -->
                        <div class="my-object-list__decision">
                            <input type="submit" value="決定" class="main-btn my-object-list__submit">
                            <input type="reset" value="キャンセル" class="sub-btn my-object-list__cansel"
                                id="js-category-cansel">
                        </div>
                    </div>

                    <!-- サーバーから取得したマイオブジェクト一覧の画像 -->
                    <ul class="my-object-list__items">
                    </ul>
                </div>
            </div>
        </div>
    </main>
    <footer id="footer" style="display: none;"></footer>
    <script src="views/js/include.js"></script>
    <script src="views/js/modal.js"></script>
    <script>
      // クランリストを作成
      let clanList = []

      <% clanList.forEach((clan) => { %>
        clanList.push({
          clanId: "<%= clan.clanId %>",
          clanName: "<%= clan.clanName %>",
        });
      <% }); %>

      // オブジェクトリストを作成
      let objectList = []

      <% objectList.forEach((object) => { %>
        // urlを整形
        var url = "<%= object.objectURL %>";
        url = url.replace('amp;', '')

        objectList.push({
          objectId: "<%= object.id %>",
          objectName: "<%= object.objectName %>",
          objectURL: url,
        });
      <% }); %>

      // パターンリストを作成
      let patternList = []

      <% patternList.forEach(pattern => { %>
        patternList.push({
          markerURL: "<%= pattern.patternURL %>",
          objectURL: "<%= pattern.objectURL %>",
        })
      <% }); %>

    </script>
    <script src="views/js/cameraBtn.js"></script>
    <script>
      // a-markerを生成
      // setARMarker();

      function setARMarker() {
        // マーカーを生成する領域を取得
        const marker_area = document.getElementById('marker-area');

        // すでにマーカーが存在していた場合、削除する
        if (marker_area.hasChildNodes) {
          // 子要素を削除
          while (marker_area.firstChild) {
            marker_area.removeChild(marker_area.firstChild);
          }
        }

        for (let pattern of patternList) {
          // a-markerタグを作成
          const a_marker_element = document.createElement('a-marker');
          a_marker_element.setAttribute('type', 'pattern');
          // a_marker_element.setAttribute('url', `${pattern.patternURL}`);

          // a-entityタグを作成
          const a_entity_element = document.createElement('a-entity');
          a_entity_element.setAttribute('position', '0 -1 0');
          a_entity_element.setAttribute('scale', '0.05 0.05 0.05');
          // a_entity_element.setAttribute('gltf-model', `${marker.objectURL}`);

          // divに追加
          a_marker_element.appendChild(a_entity_element);
          marker_area.appendChild(a_marker_element);

        }
      }

    </script>
    <script>
      // 開いているモーダルを判定
      let selectType = null;

      function selectButtonAction() {
        console.log(`selecttype => ${selectType}`);

        if (selectType == 0) {
          // クランを選択したよ
          selectedClan();
        } else if (selectType == 1) {
          // オブジェクトを選択したよ
          selectedObject();
        }
      }

      // TODO: クランが選択された時

      function selectedClan() {
        // 選択されたクランのIDを取得
        let clanId = null;
        const radio_element = document.getElementsByName('clanRadio');
        for (let radio of radio_element) {
          if (radio.checked) {
            clanId = radio.value;
          }
        }
        console.log(`clanId => ${clanId}`);

        // 選択されたクランのマーカーリストを取得
        let xhr = new XMLHttpRequest();

        // サーバーに送信
        xhr.open('post', '/clan_selected');
        xhr.send(JSON.stringify({clanId: clanId}));

        // サーバーの応答を検知
        xhr.onreadystatechange = function () {
            if(xhr.readyState === 4 && xhr.status === 200){
                // パターンリストを取得
                let patternList = JSON.parse(xhr.responseText);

                console.log(`patternList => ${patternList}`);
                console.dir(patternList);

                // マーカーをセット
                setPattern(patternList);
            }
        };
      }

      // TODO: オブジェクトが選択された時
      function selectedObject(index) {
        // imageタグを取得
        const image_element = document.getElementById('<%= userId %>');


        // objectURLを変更する
        image_element.setAttribute('src', `${objectList[index].objectURL}`);

        const xhr = new XMLHttpRequest();

        // サーバーに送信
        xhr.open('post', '/object_selected');
        xhr.send(JSON.stringify({objectId: objectList[index].objectId}));

        // モーダルを閉じる

      }

    </script>
    <script>

      function setPattern(patternList) {

        // patternリスト、imageタグを生成する領域を取得
        const marker_area_element = document.getElementById('marker_area');
        const assets_element = document.getElementById('assets');

        // TODO: 既存のマーカー、assetsを削除

        // パターンリストを生成
        for (let pattern of patternList) {

          // imgタグを作成
          const image_element = document.createElement('img');
          image_element.hidden = true;
          image_element.setAttribute('id', `${pattern.userId}`);
          image_element.setAttribute('src', `${pattern.objectURL}`);
          image_element.setAttribute('crossorigin', 'anonymous')

          // assets領域に追加
          assets_element.appendChild(image_element);

          // a-markerタグを作成
          const marker_element = document.createElement('a-marker');
          marker_element.setAttribute('type', 'pattern');
          marker_element.setAttribute('url', `${pattern.patternURL}`);
          // marker_element.setAttribute('preset', `${marker.markerURL}`);

          // a-planeタグを作成
          const plane_element = document.createElement('a-plane');
          plane_element.setAttribute('position', '0 0 0');
          plane_element.setAttribute('rotation', '-90 0 0');
          plane_element.setAttribute('material', `src: #${pattern.userId}`);

          // マーカーリスト領域に追加
          marker_element.appendChild(plane_element);
          marker_area_element.appendChild(marker_element);

        }
      }

    </script>
</body>
</html>
