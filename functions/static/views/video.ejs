<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="views/css/reset.css">
    <link rel="stylesheet" href="views/css/style.css">
    <script src="https://kit.fontawesome.com/7a89e754ee.js" crossorigin="anonymous"></script>
    <!--<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/110/three.js"></script>-->
    <!--<script src="https://raw.githack.com/AR-js-org/AR.js/3.1.0/three.js/build/ar.js"></script>-->
    <script src="/__/firebase/8.0.1/firebase-app.js"></script>
    <script src="/__/firebase/8.0.1/firebase-firestore.js"></script>
    <script src="/__/firebase/init.js"></script>
</head>

<body>
    <nav id="set-hamburger" style="display: none;"></nav>
    <header class="header">
        <div class="header__video-back">
          <a href="/my_page">
            <div class="search__icon">
              <span class="icon-line icon-line--line1"></span>
              <span class="icon-line icon-line--line2"></span>
            </div>
          </a>
        </div>
    </header>
    <main class="main">
        <section class="video-area"></section> <!-- セレクトボタンが押されて生成 -->
        <section class="video-select">
            <button class="video-select__btn main-btn" id="js-select-btn-two">2人で開始する</button>
            <button class="video-select__btn main-btn" id="js-select-btn-four">4人で開始する</button>
        </section>
        <!-- マイオブジェクトから共有するmodalのコード -->
        <div class="modal js-modal">
            <div class="modal__bg js-bg"></div>
            <div class="modal__main">
                <div class="my-object-list">
                    <h2 class="my-object-list__title">マイオブジェクト一覧</h2>

                    <!-- マイオブジェクト一覧で選択したときに表示するアコーディオン -->
                    <div class="category__my-object">
                        <!-- 選択中の画像を表示 -->
                        <div class="my-object-list__select my-object-list__select--video" id="select_image"></div>
                        <!-- 選択するボタン -->
                        <div class="my-object-list__decision">
                            <input type="submit" value="マイオブジェクトを選択" class="main-btn my-object-list__submit" id="submitButton">
                            <input type="reset" value="キャンセル" class="sub-btn my-object-list__cansel"
                                id="js-category-cansel">
                        </div>
                    </div>

                    <!-- サーバーから取得したマイオブジェクト一覧の画像 -->
                    <ul class="my-object-list__items">
                        <!--<li class="my-object-list__item" id="my-object-list__item1"></li>-->
                    </ul>
                </div>
            </div>
        </div>
    </main>
    <section class="video-menu">
        <div class="video-menu__object js-btn"><i class="fas fa-images fa-2x"></i>オブジェクト</div>
        <div class="video-menu__mic"><i class="fas fa-microphone fa-2x icon-mic"></i>マイク</div>
        <div class="video-menu__video"><i class="fas fa-video fa-2x icon-video"></i>ビデオ</div>
        <!-- <a href="video-active.html"><i class="far fa-comment-dots fa-2x"></i>通話を開始</a> -->
        <div class="video-menu__start">
            <i class="far fa-comment-dots fa-2x"></i>通話を開始
            <form id="post_form" class="video-menu__form" action="/video-active" name="activeForm" method="post">

            </form>
        </div>
    </section>
    <footer id="footer" style="display: none;"></footer>

    <script src="views/js/include.js"></script>
    <script src="views/js/modal.js"></script>
    <script src="views/js/videoChat.js"></script>
    <script>
        const btnTwo = document.getElementById('js-select-btn-two');
        const btnFour = document.getElementById('js-select-btn-four');
        const videoSelect = document.querySelector('.video-select');
        const videoArea = document.querySelector('.video-area');
        const videoMenu = document.querySelector('.video-menu')
        const videoBtn = document.querySelector('.video-menu__video');
        const micBtn = document.querySelector('.video-menu__mic');
        const iconVideo = document.querySelector('.icon-video');
        const iconMic = document.querySelector('.icon-mic');
        let micFlag = true;
        let videoFlag = true;
        let userWidth = "48%";
        // iphoneかipadかその他かを確認
        const model = navigator.platform;
        if (model.indexOf("iPhone") != -1) {
            userWidth = "39vh";
        } if (model.indexOf("iPad") != -1) {
            userWidth = "42vh";
        }
        let myName = 'userName';
        let people = 0;
        let anyOneIds = null;
        let auth = null;
        let roomId = null;

        // test userId
        const userId = '<%= userId%>';

        let objectList = [];

        <% objectList.forEach((object) => { %>
            // urlを整形
            var url = "<%= object.objectURL %>";
            url = url.replace('amp;', '')

            objectList.push({
                objectId: "<%= object.id %>",
                objectName: "<%= object.objectName %>",
                objectURL: url,
                objectSelected: "<%= object.objectSelected %>"
            });
        <% }); %>

        // TODO: think about necessary of user's video
        // if need : create <video> to insert localStream

        videoBtn.addEventListener('click', () => {
            iconVideo.classList.toggle('fa-video');
            iconVideo.classList.toggle('fa-video-slash');

            // on/off 切り替え
            videoFlag = !videoFlag;
            console.log(`video switch => ${videoFlag}`);

            // stream を一時中断
            const tracks = document.querySelector('#localVideo').srcObject.getTracks();
            tracks.forEach(track => {
                track.stop();
            })

            // stream を設定通りに再開
            openUserMedia();
        });

        micBtn.addEventListener('click', () => {
            iconMic.classList.toggle('fa-microphone');
            iconMic.classList.toggle('fa-microphone-slash');

            // on/off 切り替え
            micFlag = !micFlag;
            console.log(`mic switch => ${micFlag}`);

            // stream を一時中断
            const tracks = document.querySelector('#localVideo').srcObject.getTracks();
            tracks.forEach(track => {
                track.stop();
            })

            // stream を設定通りに再開
            openUserMedia();
        });

        btnTwo.addEventListener('click', async() => {
            videoMenu.style.display = 'flex';
            videoSelect.style.display = 'none';
            people = 2;
            // TODO: userIdを貰って使う
            const preapreResult = await twoVideoChatPrepare(userId);
            if(preapreResult.hasOwnProperty('err')){
                // has error
                console.log(preapreResult.err);
            }else{
                // roomId : ROOMのID
                // auth   : 'host' or 'member'
                // myName : 自分の名前
                // anyOneIds : 相手のIDが入った配列
                myName = preapreResult.myName
                anyOneIds = preapreResult.anyOneIds;
                auth = preapreResult.auth;
                roomId = preapreResult.roomId;
            }
            // div要素の作成
            const user = document.createElement('div');
            user.classList.add('user');
            user.id = userId;
            user.style.width = '100%';
            user.style.height = '100%';
            user.style.position = 'relative';

            // userDisplay要素の作成
            const userDisplay = document.createElement('div');
            userDisplay.classList.add('user__name');
            userDisplay.style.position = 'absolute';
            userDisplay.appendChild(document.createTextNode(myName));

            // userDisplayをuserの子要素に
            user.appendChild(userDisplay);

            // video要素の作成
            const video = document.createElement('video');
            video.id = 'localVideo';
            video.style.width = '100%';
            video.style.height = '100%';
            video.autoplay = true;
            video.style.position = 'absolute';

            // videoをuserの子要素に
            user.appendChild(video);

            // userをvideoAreaの子要素に
            videoArea.appendChild(user);
            videoArea.style.display = 'flex';
            openUserMedia();
        });

        btnFour.addEventListener('click', () => {
            videoMenu.style.display = 'flex';
            videoSelect.style.display = 'none';
            people = 4;
            // TODO: userIdを貰って使う
            // TODO: 4人用を書く
            // const preapreResult = await twoVideoChatPrepare(userId);
            // if(preapreResult.hasOwnProperty('err')){
            //     // has error
            //     console.log(preapreResult.err);
            // }else{
            //     // roomId : ROOMのID
            //     // auth   : 'host' or 'member'
            //     // myName : 自分の名前
            //     // anyOneId : 相手のID
            //     myName = preapreResult.myName
            //     anyOneId = preapreResult.anyOneId;
            //     auth = preapreResult.auth;
            //     roomId = preapreResult.roomId;
            // }
            // // div要素の作成
            // const user = document.createElement('div');
            // user.classList.add('user');
            // user.id = videoTwo[0];
            // user.style.width = '100%';
            // user.style.height = '100%';
            // user.style.position = 'relative';

            // // userDisplay要素の作成
            // const userDisplay = document.createElement('div');
            // userDisplay.classList.add('user__name');
            // userDisplay.style.position = 'absolute';
            // userDisplay.appendChild(document.createTextNode(myName));

            // // userDisplayをuserの子要素に
            // user.appendChild(userDisplay);

            // // video要素の作成
            // const video = document.createElement('video');
            // video.id = 'localVideo';
            // video.style.width = '100%';
            // video.style.height = '100%';
            // video.autoplay = true;
            // video.style.position = 'absolute';

            // // videoをuserの子要素に
            // user.appendChild(video);

            // // userをvideoAreaの子要素に
            // videoArea.appendChild(user);
            // videoArea.style.display = 'flex';
            // openUserMedia();
        });

        //マイオブジェクト一覧を表示
        const modalList = document.querySelector('.my-object-list__items');
        const modalTitle = document.querySelector('.my-object-list__title');
        const addBtn = document.querySelector('.js-btn');
        const categorySubmit = document.querySelector('.my-object-list__submit');
        const myObjectListItems = document.querySelector('.my-object-list__items');
        const categoryMyObject = document.querySelector('.category__my-object');
        const categoryCansel = document.querySelector('.my-object-list__cansel');
        // const objects = ['オブジェクト1', 'オブジェクト2', 'オブジェクト3', 'オブジェクト4', 'オブジェクト5', 'オブジェクト6', 'オブジェクト7', 'オブジェクト8', 'オブジェクト3', 'オブジェクト4', 'オブジェクト5', 'オブジェクト6', 'オブジェクト7', 'オブジェクト8'];

        // プラスボタンをクリックしたときにマイオブジェクト一覧を動的に生成する。
        addBtn.addEventListener('click', () => {
            modalList.innerHTML = '';
            modalTitle.innerText = 'マイオブジェクトから選択';
            // objects.forEach(object => {
            //     const li = document.createElement('li');

            //     li.classList.add('my-object-list__item');
            //     li.style.backgroundImage = `url(${object.objectURL})`;
            //     modalList.appendChild(li);
            // });
            for(let [index, object] of objectList.entries()){
                const li = document.createElement('li');

                console.log(`objectURL => ${object.objectURL}`);
                console.log(`index => ${index}`);

                li.classList.add('my-object-list__item');
                li.style.backgroundImage = `url(${object.objectURL})`;
                li.setAttribute('onClick', `setMyModal(${index})`);
                modalList.appendChild(li);
            }
            //マイオブジェクト一覧のオブジェクトを選択したときにアコーディオンを表示する
            // const items = document.querySelectorAll('.my-object-list__item');

            // items.forEach(item => {
            //     item.addEventListener('click', () => {
            //         categoryMyObject.classList.toggle('category-open');
            //         myObjectListItems.classList.toggle('my-object-list__items--close');

            //         if (categoryMyObject.classList.contains('category-open')) {
            //             categoryMyObject.style.height = '80%';
            //         } else {
            //             categoryMyObject.style.height = 0;
            //         }

            //         if (myObjectListItems.classList.contains('my-object-list__items--close')) {
            //             myObjectListItems.style.height = 0;
            //         } else {
            //             myObjectListItems.style.height = '80%';
            //         }
            //     });
            // });
            //マイオブジェクト一覧の"キャンセルボタン"を押したときの処理
            categoryCansel.addEventListener('click', () => {
                categoryMyObject.classList.remove('category-open');
                myObjectListItems.classList.remove('my-object-list__items--close');

                if (categoryMyObject.classList.contains('category-open')) {
                    categoryMyObject.style.height = '80%';
                } else {
                    categoryMyObject.style.height = 0;
                }

                if (myObjectListItems.classList.contains('my-object-list__items--close')) {
                    myObjectListItems.style.height = 0;
                } else {
                    myObjectListItems.style.height = '80%';
                }
            });
            //マイオブジェクト一覧の"マイオブジェクトを共有する"ボタンを押した時に起こる処理（サーバーに接続し、アップデート処理が必要）
            categorySubmit.addEventListener('click', () => {
                modal.classList.remove('open');
                categoryCansel.click();
            });
        });

        //マイオブジェクト一覧の"マイオブジェクトを選択"ボタンを押した時に起こる処理（サーバーに接続し、アップデート処理が必要）
        categorySubmit.addEventListener('click', () => {
            modal.classList.remove('open');
            categoryCansel.click();
        });

        //headerの戻るボタンの処理
        const headerBack = document.querySelector('.header__video-back');
        headerBack.addEventListener('click', () => {
            // 前ページが通話ページであったかを判断している。
            if (document.referrer.includes('video-active.html')) {
                location.href = './my-page.html';
            } else {
                history.back();
            }
        });

        // use micFlag and videoFlag to get userMedia
        async function openUserMedia(objectURL, patternURL){
            // get stream if you don't need AR
            const stream = await navigator.mediaDevices.getUserMedia({video : videoFlag, audio : micFlag});
            document.querySelector('#localVideo').srcObject = stream;
            console.log(document.querySelector('#localVideo').srcObject);
        }

        function setMyModal(index){
            console.log(`welcome to setMyModal => ${index}`);
            const myObjectListItems = document.querySelector('.my-object-list__items');
            const categoryMyObject = document.querySelector('.category__my-object');

             categoryMyObject.classList.toggle('category-open');
            myObjectListItems.classList.toggle('my-object-list__items--close');

            if (categoryMyObject.classList.contains('category-open')) {
                categoryMyObject.style.height = '80%';
            } else {
                categoryMyObject.style.height = 0;
            }

            if (myObjectListItems.classList.contains('my-object-list__items--close')) {
                myObjectListItems.style.height = 0;
            } else {
                myObjectListItems.style.height = '80%';
            }

            const image_div_element = document.getElementById('select_image');

            image_div_element.style.backgroundImage = `url(${objectList[index].objectURL})`;

            const submitButton = document.getElementById('submitButton');

            submitButton.setAttribute('onClick', `selectedObject(${index})`);;
        }

        function selectedObject(index){
            const objectId = objectList[index].objectId;

            const xhr = new XMLHttpRequest();

            xhr.open('post', '/object_selected');
            xhr.send(JSON.stringify({'objectId' : objectId}));
            xhr.onreadystatechange = function(){
                if(xhr.readyState === 4 && xhr.status === 200){

                }
            }
        }

        const formArea = document.querySelector(".video-menu__start");
        formArea.addEventListener('click', () => {
            // console.log('click form area');
            // get form
            const form = document.getElementById('post_form');

            // create request_body
            const request_body = {
                people : people,
                anyOneIds : anyOneIds,
                auth : auth,
                roomId : roomId,
                micFlag : micFlag,
                videoFlag : videoFlag
            };

            // create input
            const body_element = document.createElement('input');
            body_element.hidden = true;
            body_element.setAttribute('name', '_request_body');
            body_element.setAttribute('value', JSON.stringify(request_body));

            // console.log(`requestBody => ${JSON.stringify(request_body)}`);
            
            // body_elementをformの子要素に
            form.appendChild(body_element);

            // submit form
            form.submit();
        })
    </script>
</body>

</html>
