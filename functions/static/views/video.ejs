<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="css/reset.css">
    <link rel="stylesheet" href="css/style.css">
    <script src="https://kit.fontawesome.com/7a89e754ee.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/110/three.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/3.1.0/three.js/build/ar.js"></script>
</head>

<body>
    <nav id="set-hamburger" style="display: none;"></nav>
    <header class="header">
        <div class="header__video-back">
            <div class="search__icon">
                <span class="icon-line icon-line--line1"></span>
                <span class="icon-line icon-line--line2"></span>
            </div>
        </div>
        <div class="header__name">部屋名</div>
    </header>
    <main class="main">
        <section class="video-area"></section> <!-- セレクトボタンが押されて生成 -->
        <section class="video-select">
            <button class="video-select__btn main-btn" id="js-select-btn-two">2人で開始する</button>
            <button class="video-select__btn main-btn" id="js-select-btn-four">4人で開始する</button>
        </section>
        <!-- マイオブジェクトから共有するmodalのコード -->
        <div class="modal js-modal">
            <div class="modal__bg js-bg"></div>
            <div class="modal__main">
                <div class="my-object-list">
                    <h2 class="my-object-list__title">マイオブジェクト一覧</h2>

                    <!-- マイオブジェクト一覧で選択したときに表示するアコーディオン -->
                    <div class="category__my-object">
                        <!-- 選択中の画像を表示 -->
                        <div class="my-object-list__select my-object-list__select--video"></div>
                        <!-- 選択するボタン -->
                        <div class="my-object-list__decision">
                            <input type="submit" value="マイオブジェクトを選択" class="main-btn my-object-list__submit">
                            <input type="reset" value="キャンセル" class="sub-btn my-object-list__cansel"
                                id="js-category-cansel">
                        </div>
                    </div>

                    <!-- サーバーから取得したマイオブジェクト一覧の画像 -->
                    <ul class="my-object-list__items">
                        <li class="my-object-list__item" id="my-object-list__item1"></li>
                        <li class="my-object-list__item" id="my-object-list__item2"></li>
                        <li class="my-object-list__item" id="my-object-list__item3"></li>
                        <li class="my-object-list__item" id="my-object-list__item4"></li>
                        <li class="my-object-list__item" id="my-object-list__item5"></li>
                        <li class="my-object-list__item" id="my-object-list__item6"></li>
                        <li class="my-object-list__item" id="my-object-list__item7"></li>
                        <li class="my-object-list__item" id="my-object-list__item8"></li>
                        <li class="my-object-list__item" id="my-object-list__item9"></li>
                        <li class="my-object-list__item" id="my-object-list__item10"></li>
                        <li class="my-object-list__item" id="my-object-list__item11"></li>
                        <li class="my-object-list__item" id="my-object-list__item12"></li>
                        <li class="my-object-list__item" id="my-object-list__item13"></li>
                        <li class="my-object-list__item" id="my-object-list__item14"></li>
                        <li class="my-object-list__item" id="my-object-list__item15"></li>
                        <li class="my-object-list__item" id="my-object-list__item16"></li>
                    </ul>
                </div>
            </div>
        </div>
    </main>
    <section class="video-menu">
        <div class="video-menu__object js-btn"><i class="fas fa-images fa-2x"></i>オブジェクト</div>
        <div class="video-menu__mic"><i class="fas fa-microphone-slash fa-2x icon-mic"></i>マイク</div>
        <div class="video-menu__video"><i class="fas fa-video-slash fa-2x icon-video"></i>ビデオ</div>
        <!-- <a href="video-active.html"><i class="far fa-comment-dots fa-2x"></i>通話を開始</a> -->
        <div class="video-menu__start">
            <i class="far fa-comment-dots fa-2x"></i>通話を開始
            <form class="video-menu__form" action="video-active.html" name="activeForm" method="get">
                <input name="people" type="hidden" name="nin" value=4>
                <input class="video-menu__submit" type="submit" value="">
            </form>
        </div>
    </section>
    <footer id="footer" style="display: none;"></footer>

    <script src="js/include.js"></script>
    <script src="js/modal.js"></script>
    <script src="js/videoChat.js"></script>
    <script>
        const btnTwo = document.getElementById('js-select-btn-two');
        const btnFour = document.getElementById('js-select-btn-four');
        const videoSelect = document.querySelector('.video-select');
        const videoArea = document.querySelector('.video-area');
        const videoMenu = document.querySelector('.video-menu')
        const videoBtn = document.querySelector('.video-menu__video');
        const micBtn = document.querySelector('.video-menu__mic');
        const iconVideo = document.querySelector('.icon-video');
        const iconMic = document.querySelector('.icon-mic');
        const videoTwo = ['item1', 'item2'];
        const videoFour = ['item1', 'item2', 'item3', 'item4'];
        const videoStart = document.querySelector('.video-menu__start');
        const videoForm = document.querySelector('.video-menu__form');
        let micFlag = true;
        let videoFlag = true;

        // TODO: think about necessary of user's video
        // if need : create <video> to insert localStream

        videoBtn.addEventListener('click', () => {
            iconVideo.classList.toggle('fa-video');
            iconVideo.classList.toggle('fa-video-slash');

            // videoを切るように設定されていた場合
            if(iconVideo.classList.contains('fa-video-slash')){
                videoFlag = false;
            }

            // stream を一時中断
            const tracks = document.querySelector('#localVideo').srcObject.getTracks();
            tracks.forEach(track => {
                track.stop();
            })

            // stream を設定通りに再開
            openUserMedia();
        });

        micBtn.addEventListener('click', () => {
            iconMic.classList.toggle('fa-microphone');
            iconMic.classList.toggle('fa-microphone-slash');

            // videoを切るように設定されていた場合
            if(iconMic.classList.contains('fa-microphone-slash')){
                micFlag = false;
            }

            // stream を一時中断
            const tracks = document.querySelector('#localVideo').srcObject.getTracks();
            tracks.forEach(track => {
                track.stop();
            })

            // stream を設定通りに再開
            openUserMedia();
        });

        btnTwo.addEventListener('click', () => {
            videoMenu.style.display = 'flex';
            videoSelect.style.display = 'none';
            document.activeForm.people.value = 2;
            videoTwo.forEach(userName => {
                const user = document.createElement('div');
                user.classList.add('user');
                user.id = userName;
                if (window.matchMedia('(min-width: 1000px)').matches) {
                    user.style.width = '48%';
                    user.style.height = '100%';
                } else {
                    user.style.width = '100%';
                    user.style.height = '48%';
                };
                const userDisplay = document.createElement('div');
                userDisplay.classList.add('user__name');
                userDisplay.appendChild(document.createTextNode(userName));
                user.appendChild(userDisplay);

                videoArea.appendChild(user);
                videoArea.style.display = 'flex';
            });
        });

        btnFour.addEventListener('click', () => {
            videoMenu.style.display = 'flex';
            videoSelect.style.display = 'none';
            document.activeForm.people.value = 4;
            videoFour.forEach(userName => {
                const user = document.createElement('div');
                user.classList.add('user');
                user.id = userName;
                user.style.width = '48%';
                user.style.height = '48%';

                const userDisplay = document.createElement('div');
                userDisplay.classList.add('user__name');
                userDisplay.appendChild(document.createTextNode(userName));
                user.appendChild(userDisplay);
                user.appendChild(userDisplay);

                videoArea.appendChild(user);
                videoArea.style.display = 'flex';
            });
        });

        //マイオブジェクト一覧を表示
        const items = document.querySelectorAll('.my-object-list__item');
        const categoryMyObject = document.querySelector('.category__my-object');
        const myObjectListItems = document.querySelector('.my-object-list__items');
        const categoryCansel = document.querySelector('.my-object-list__cansel');
        const categorySubmit = document.querySelector('.my-object-list__submit');
        // マイオブジェクト一覧のオブジェクトを選択したときにアコーディオンを表示する
        items.forEach(item => {
            item.addEventListener('click', () => {
                categoryMyObject.classList.toggle('category-open');
                myObjectListItems.classList.toggle('my-object-list__items--close');

                if (categoryMyObject.classList.contains('category-open')) {
                    categoryMyObject.style.height = '80%';
                } else {
                    categoryMyObject.style.height = 0;
                }

                if (myObjectListItems.classList.contains('my-object-list__items--close')) {
                    myObjectListItems.style.height = 0;
                } else {
                    myObjectListItems.style.height = '80%';
                }
            });
        });
        //マイオブジェクト一覧の"キャンセルボタン"を押したときの処理
        categoryCansel.addEventListener('click', () => {
            categoryMyObject.classList.toggle('category-open');
            myObjectListItems.classList.toggle('my-object-list__items--close');

            if (categoryMyObject.classList.contains('category-open')) {
                categoryMyObject.style.height = '80%';
            } else {
                categoryMyObject.style.height = 0;
            }

            if (myObjectListItems.classList.contains('my-object-list__items--close')) {
                myObjectListItems.style.height = 0;
            } else {
                myObjectListItems.style.height = '80%';
            }
        });

        //マイオブジェクトを選択した時に、フォームを消し、ポジションをstaticにする処理
        btns.forEach(btn => {
            btn.addEventListener('click', () => {
                videoStart.style.position = 'static';
                videoForm.style.display = 'none';
            });
        });
        bg.addEventListener('click', () => {
            videoStart.style.position = 'relative';
            videoForm.style.display = 'inline';
        });

        //マイオブジェクト一覧の"マイオブジェクトを選択"ボタンを押した時に起こる処理（サーバーに接続し、アップデート処理が必要）
        categorySubmit.addEventListener('click', () => {
            modal.classList.remove('open');
            categoryCansel.click();
        });

        //headerの戻るボタンの処理
        const headerBack = document.querySelector('.header__video-back');
        headerBack.addEventListener('click', () => {
            // 前ページが通話ページであったかを判断している。
            if (document.referrer.includes('video-active.html')) {
                location.href = './my-page.html';
            } else {
                history.back();
            }
        });

        // use micFlag and videoFlag to get userMedia
        async function openUserMedia(objectURL, patternURL){
            // get stream if you don't need AR 
            // const stream = await navigator.mediaDevices.getUserMedia({video : videoFlag, audio : micFlag});
            // document.querySelector('#localVideo').srcObject = stream;

            // TODO: AR code
            const renderer = new twoVideoChatPrepare.WebGLRenderer({
                antialias: true,
                alpha: true
            });

            // renderer style setting

            // insert to dom
            
            // scene and camera
            const scene = new twoVideoChatPrepare.Scene();
            scene.visible = false;
            const camera = new twoVideoChatPrepare.Camera();
            scene.add(camera);

            // select source for AR
            const arToolkitSource = new THREE.ArToolkitSource({
                sourceType: 'webcam'
            });

            // init wait 2 seconds to resize
            
            // create arToolkitContext
            const arToolkitContext = new THREEx.ArToolkitContext({
                cameraParametersUrl: 'data/camera_para.dat',
                detectionMode: 'mono'
            });

            arToolkitContext.init(() => {
                camera.projectionMatrix.copy(arToolkitContext.getProjectionMatrix());
            });

            // create arMarkerControls to use patternURL
            // TODO: ask iori for use patternURL

            // insert to dom

            // create stream from dom

            
        }
    </script>
</body>

</html>
